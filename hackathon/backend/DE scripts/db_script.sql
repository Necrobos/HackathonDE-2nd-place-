--DROP SCHEMA dm CASCADE;
--DROP TABLE IF EXISTS dm.courses, dm.downloaded_files, dm.chunks CASCADE;

create schema if not exists stage;
CREATE SCHEMA IF NOT EXISTS dm;
--drop TABLE dm.chunks CASCADE; 
-- –ö—É—Ä—Å—ã ‚Äî –∫–∞–∂–¥—ã–π –∫—É—Ä—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É PDF-—Ñ–∞–π–ª—É
CREATE TABLE dm.courses (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,   -- –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ 
    description TEXT, --–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
	url TEXT
);


CREATE TABLE dm.downloaded_files(
	id SERIAL PRIMARY KEY, 
	course_id INTEGER NOT NULL REFERENCES dm.courses(id) ON DELETE CASCADE, --—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ñ–∞–π–ª
	name VARCHAR(255) NOT NULL UNIQUE, --–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
	description TEXT --–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
);


CREATE TABLE dm.chunks (
    id SERIAL PRIMARY KEY,
	id_file INTEGER NOT NULL,
    title_name VARCHAR(255) NOT NULL, -- –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	source_url VARCHAR(255) DEFAULT NULL, --–∫—Ä—á –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç–æ–º —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Ç–¥ –≤ —Ñ–∞–π–ª–µ, –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–¥–∞!
    content TEXT NOT NULL,             --—Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞
	created_at TIMESTAMP WITH TIME ZONE --–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è 
);




CREATE TABLE dm.chunks_vectors(
	chunk_id INTEGER REFERENCES dm.chunks(id) ON DELETE CASCADE, --—Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–π–¥–∏ —á–∞–Ω–∫–∞, –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
	embedding VECTOR(256) NOT NULL UNIQUE, -- –í–ï–ö–¢–û–†
	PRIMARY KEY(chunk_id)
);

--drop table if exists dm.chunks_vectors;

-- –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
CREATE TABLE dm.tags (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE  -- –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ñ—É–Ω–∫—Ü–∏–∏", "—Ü–∏–∫–ª—ã"
);

-- –°–≤—è–∑—å –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –∏ —Ç–µ–≥–∞–º–∏ (–º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º)
CREATE TABLE dm.chunk_tags (
    chunk_id INTEGER NOT NULL REFERENCES dm.chunks(id) ON DELETE CASCADE,
    tag_id INTEGER NOT NULL REFERENCES dm.tags(id) ON DELETE CASCADE,
    PRIMARY KEY (chunk_id, tag_id)
);


CREATE SCHEMA logs;
CREATE TABLE IF NOT EXISTS logs.bd_logs (
    id SERIAL PRIMARY KEY,
    operation_name TEXT NOT NULL,          -- –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'load_chunks_from_stage'
    start_time TIMESTAMPTZ NOT NULL,       -- –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    end_time TIMESTAMPTZ,                  -- –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
    row_count INT,                         -- —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    status TEXT NOT NULL DEFAULT 'STARTED',-- 'STARTED', 'SUCCESS', 'ERROR'
    error_message TEXT                     -- –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ
);




CREATE OR REPLACE PROCEDURE dm.load_from_stage(
    IN v_name_course VARCHAR(255),
    IN v_name_file VARCHAR(255),
    IN v_description_course TEXT,
    IN v_description_file TEXT,
    IN v_url TEXT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_main_log_id BIGINT;       -- ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞
    v_log_id BIGINT;            -- ID —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    v_row_count INT;            -- —Å—á—ë—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫
    v_start_time TIMESTAMPTZ;   -- –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    v_id_file INT;
    v_id_course INT;
    v_flg CHAR(1);
BEGIN
    -- –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥: –Ω–∞—á–∞–ª–æ –≤—Å–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    v_start_time := NOW();
    INSERT INTO logs.bd_logs (operation_name, start_time, status)
    VALUES ('load_from_stage: PROCEDURE START', v_start_time, 'STARTED')
    RETURNING id INTO v_main_log_id;

    RAISE NOTICE '–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã load_from_stage. –õ–æ–≥ ID: %', v_main_log_id;

    -- –ü–æ–∏—Å–∫ –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—Å–∞
    INSERT INTO logs.bd_logs (operation_name, start_time, status)
    VALUES ('load_from_stage: CHECK/INSERT COURSE', NOW(), 'STARTED')
    RETURNING id INTO v_log_id;

    WITH cte_max AS (
        SELECT COALESCE(MAX(id), 0) AS max_id
        FROM dm.courses
    )
    SELECT 
        COALESCE(id, max_id + 1), 
        CASE WHEN id IS NOT NULL THEN 'Y' ELSE 'N' END
    INTO v_id_course, v_flg
    FROM cte_max
    LEFT JOIN dm.courses ON LOWER(v_name_course) = LOWER(name);

    IF v_flg = 'N' THEN
        INSERT INTO dm.courses (name, description, url)
        VALUES (v_name_course, v_description_course, v_url)
        RETURNING id INTO v_id_course;
        GET DIAGNOSTICS v_row_count = ROW_COUNT;
        RAISE NOTICE '–ö—É—Ä—Å "%s" —Å–æ–∑–¥–∞–Ω. ID: %', v_name_course, v_id_course;
    ELSE
        v_row_count := 0;
        RAISE NOTICE '–ö—É—Ä—Å "%s" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ID: %', v_name_course, v_id_course;
    END IF;

    UPDATE logs.bd_logs
    SET 
        end_time = NOW(),
        row_count = v_row_count,
        status = 'SUCCESS'
    WHERE id = v_log_id;

    -- –ü–æ–∏—Å–∫ –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    INSERT INTO logs.bd_logs (operation_name, start_time, status)
    VALUES ('load_from_stage: CHECK/INSERT FILE', NOW(), 'STARTED')
    RETURNING id INTO v_log_id;


    WITH cte_max AS (
        SELECT COALESCE(MAX(id), 0) AS max_id
        FROM dm.downloaded_files
    )
    SELECT 
        COALESCE(id, max_id + 1), 
        CASE WHEN id IS NOT NULL THEN 'Y' ELSE 'N' END
    INTO v_id_file, v_flg
    FROM cte_max
    LEFT JOIN dm.downloaded_files ON LOWER(v_name_file) = LOWER(name);

    IF v_flg = 'N' THEN
        INSERT INTO dm.downloaded_files (course_id, name, description)
        VALUES (v_id_course, v_name_file, v_description_file)
        RETURNING id INTO v_id_file;
        GET DIAGNOSTICS v_row_count = ROW_COUNT;
        RAISE NOTICE '–§–∞–π–ª "%s" —Å–æ–∑–¥–∞–Ω. ID: %', v_name_file, v_id_file;
    ELSE
        v_row_count := 0;
        RAISE NOTICE '–§–∞–π–ª "%s" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. ID: %', v_name_file, v_id_file;
    END IF;

    UPDATE logs.bd_logs
    SET 
        end_time = NOW(),
        row_count = v_row_count,
        status = 'SUCCESS'
    WHERE id = v_log_id;

    --—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —á–∞–Ω–∫–æ–≤ 
    INSERT INTO logs.bd_logs (operation_name, start_time, status)
    VALUES ('load_from_stage: DELETE OLD CHUNKS', NOW(), 'STARTED')
    RETURNING id INTO v_log_id;

    DELETE FROM dm.chunks 
    WHERE id_file = v_id_file;
    GET DIAGNOSTICS v_row_count = ROW_COUNT;

    UPDATE logs.bd_logs
    SET 
        end_time = NOW(),
        row_count = v_row_count,
        status = 'SUCCESS'
    WHERE id = v_log_id;

    RAISE NOTICE 'üóë–£–¥–∞–ª–µ–Ω–æ % —Å—Ç–∞—Ä—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ ID %', v_row_count, v_id_file;

    -- –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
    INSERT INTO logs.bd_logs (operation_name, start_time, status)
    VALUES ('load_from_stage: INSERT NEW CHUNKS', NOW(), 'STARTED')
    RETURNING id INTO v_log_id;

    INSERT INTO dm.chunks (id_file, title_name, source_url, content, created_at)
    SELECT 
        v_id_file,
        section,
        source_url, 
        text, 
        created_at::TIMESTAMP WITH TIME ZONE
    FROM stage.output;
    GET DIAGNOSTICS v_row_count = ROW_COUNT;

    UPDATE logs.bd_logs
    SET 
        end_time = NOW(),
        row_count = v_row_count,
        status = 'SUCCESS'
    WHERE id = v_log_id;

    RAISE NOTICE '–í—Å—Ç–∞–≤–ª–µ–Ω–æ % –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ ID %', v_row_count, v_id_file;

    --–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
    UPDATE logs.bd_logs
    SET 
        end_time = NOW(),
        row_count = v_row_count, 
        status = 'SUCCESS'
    WHERE id = v_main_log_id;

    RAISE NOTICE '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ load_from_stage –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥ ID: %', v_main_log_id;

EXCEPTION
    WHEN OTHERS THEN
        -- –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        UPDATE logs.bd_logs
        SET 
            end_time = NOW(),
            status = 'ERROR',
            error_message = SQLERRM
        WHERE id = v_main_log_id;

        RAISE NOTICE '–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ: %', SQLERRM;
        RAISE; 
END;
$$;


select * from dm.chunks c;
select * from dm.downloaded_files df ;
select * from dm.courses c ;
